--- a/setup.py
+++ b/setup.py
@@ -11,19 +11,19 @@ VERSION='1.3.0'
 
 def pre_install():
     """Do the custom compiling of the bluepy-helper executable from the makefile"""
-    try:
-        print("Working dir is " + os.getcwd())
-        with open("bluepy/version.h","w") as verfile:
-            verfile.write('#define VERSION_STRING "%s"\n' % VERSION)
-        for cmd in [ "make -C ./bluepy clean", "make -C bluepy -j1" ]:
-            print("execute " + cmd)
-            msgs = subprocess.check_output(shlex.split(cmd), stderr=subprocess.STDOUT)
-    except subprocess.CalledProcessError as e:
-        print("Failed to compile bluepy-helper. Exiting install.")
-        print("Command was " + repr(cmd) + " in " + os.getcwd())
-        print("Return code was %d" % e.returncode)
-        print("Output was:\n%s" % e.output)
-        sys.exit(1)
+#    try:
+#        print("Working dir is " + os.getcwd())
+#        with open("bluepy/version.h","w") as verfile:
+#            verfile.write('#define VERSION_STRING "%s"\n' % VERSION)
+#        for cmd in [ "make -C ./bluepy clean", "make -C bluepy -j1" ]:
+#            print("execute " + cmd)
+#            msgs = subprocess.check_output(shlex.split(cmd), stderr=subprocess.STDOUT)
+#    except subprocess.CalledProcessError as e:
+#        print("Failed to compile bluepy-helper. Exiting install.")
+#        print("Command was " + repr(cmd) + " in " + os.getcwd())
+#        print("Return code was %d" % e.returncode)
+#        print("Output was:\n%s" % e.output)
+#        sys.exit(1)
 
 class my_build_py(build_py):
     def run(self):
